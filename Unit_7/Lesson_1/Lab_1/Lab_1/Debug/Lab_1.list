
Lab_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001b4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002e4  080002ec  000102ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002e4  080002e4  000102ec  2**0
                  CONTENTS
  4 .ARM          00000000  080002e4  080002e4  000102ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002e4  080002ec  000102ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002e4  080002e4  000102e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002e8  080002e8  000102e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000102ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080002ec  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080002ec  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000102ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000109  00000000  00000000  00010315  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000009a  00000000  00000000  0001041e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000000c0  00000000  00000000  000104b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000058  00000000  00000000  00010578  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000040  00000000  00000000  000105d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000ac3  00000000  00000000  00010610  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000118  00000000  00000000  000110d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00002f6c  00000000  00000000  000111eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00014157  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000009c  00000000  00000000  000141d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080002cc 	.word	0x080002cc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080002cc 	.word	0x080002cc

08000170 <Clock_Init>:
#define GPIOB_CRH		(*(volatile uint32_t *)(GPIOB_BASE + 0x04))
#define GPIOB_IDR		(*(volatile uint32_t *)(GPIOB_BASE + 0x08))
#define GPIOB_ODR		(*(volatile uint32_t *)(GPIOB_BASE + 0x0C))


void Clock_Init(void){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	//Enable clock for port A and port B
	RCC_APB2ENR |= 0b11<<2;
 8000174:	4b04      	ldr	r3, [pc, #16]	; (8000188 <Clock_Init+0x18>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a03      	ldr	r2, [pc, #12]	; (8000188 <Clock_Init+0x18>)
 800017a:	f043 030c 	orr.w	r3, r3, #12
 800017e:	6013      	str	r3, [r2, #0]
}
 8000180:	bf00      	nop
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	40021018 	.word	0x40021018

0800018c <GPIO_Init>:

void GPIO_Init(void){
 800018c:	b480      	push	{r7}
 800018e:	af00      	add	r7, sp, #0
	//Set Pin B1 to output push-pull
	GPIOB_CRL = 0;
 8000190:	4b0a      	ldr	r3, [pc, #40]	; (80001bc <GPIO_Init+0x30>)
 8000192:	2200      	movs	r2, #0
 8000194:	601a      	str	r2, [r3, #0]
	GPIOB_CRL |= 1<<4;
 8000196:	4b09      	ldr	r3, [pc, #36]	; (80001bc <GPIO_Init+0x30>)
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	4a08      	ldr	r2, [pc, #32]	; (80001bc <GPIO_Init+0x30>)
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
	//Set Pin B13 to output push-pull
	GPIOB_CRH =0;
 80001a2:	4b07      	ldr	r3, [pc, #28]	; (80001c0 <GPIO_Init+0x34>)
 80001a4:	2200      	movs	r2, #0
 80001a6:	601a      	str	r2, [r3, #0]
	GPIOB_CRH |= 1<<20;
 80001a8:	4b05      	ldr	r3, [pc, #20]	; (80001c0 <GPIO_Init+0x34>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	4a04      	ldr	r2, [pc, #16]	; (80001c0 <GPIO_Init+0x34>)
 80001ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001b2:	6013      	str	r3, [r2, #0]
}
 80001b4:	bf00      	nop
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bc80      	pop	{r7}
 80001ba:	4770      	bx	lr
 80001bc:	40010c00 	.word	0x40010c00
 80001c0:	40010c04 	.word	0x40010c04

080001c4 <main>:

int main(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b082      	sub	sp, #8
 80001c8:	af00      	add	r7, sp, #0
    Clock_Init();
 80001ca:	f7ff ffd1 	bl	8000170 <Clock_Init>
    GPIO_Init();
 80001ce:	f7ff ffdd 	bl	800018c <GPIO_Init>
    while(1){
    	if((GPIOA_IDR & (1<<1)) == 0){
 80001d2:	4b15      	ldr	r3, [pc, #84]	; (8000228 <main+0x64>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	f003 0302 	and.w	r3, r3, #2
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d10c      	bne.n	80001f8 <main+0x34>
    		GPIOB_ODR ^= 1<<1;
 80001de:	4b13      	ldr	r3, [pc, #76]	; (800022c <main+0x68>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a12      	ldr	r2, [pc, #72]	; (800022c <main+0x68>)
 80001e4:	f083 0302 	eor.w	r3, r3, #2
 80001e8:	6013      	str	r3, [r2, #0]
    		while((GPIOA_IDR & (1<<1)) == 0);
 80001ea:	bf00      	nop
 80001ec:	4b0e      	ldr	r3, [pc, #56]	; (8000228 <main+0x64>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	f003 0302 	and.w	r3, r3, #2
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d0f9      	beq.n	80001ec <main+0x28>
    	}
    	if(((GPIOA_IDR & (1<<13)) >>13) == 1){
 80001f8:	4b0b      	ldr	r3, [pc, #44]	; (8000228 <main+0x64>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	0b5b      	lsrs	r3, r3, #13
 80001fe:	f003 0301 	and.w	r3, r3, #1
 8000202:	2b01      	cmp	r3, #1
 8000204:	d105      	bne.n	8000212 <main+0x4e>
    		GPIOB_ODR ^= 1<<13;
 8000206:	4b09      	ldr	r3, [pc, #36]	; (800022c <main+0x68>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	4a08      	ldr	r2, [pc, #32]	; (800022c <main+0x68>)
 800020c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000210:	6013      	str	r3, [r2, #0]
    	}
    	for(int i=0;i<255;i++);
 8000212:	2300      	movs	r3, #0
 8000214:	607b      	str	r3, [r7, #4]
 8000216:	e002      	b.n	800021e <main+0x5a>
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	3301      	adds	r3, #1
 800021c:	607b      	str	r3, [r7, #4]
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	2bfe      	cmp	r3, #254	; 0xfe
 8000222:	ddf9      	ble.n	8000218 <main+0x54>
    	if((GPIOA_IDR & (1<<1)) == 0){
 8000224:	e7d5      	b.n	80001d2 <main+0xe>
 8000226:	bf00      	nop
 8000228:	40010808 	.word	0x40010808
 800022c:	40010c0c 	.word	0x40010c0c

08000230 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000230:	480d      	ldr	r0, [pc, #52]	; (8000268 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000232:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000234:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000238:	480c      	ldr	r0, [pc, #48]	; (800026c <LoopForever+0x6>)
  ldr r1, =_edata
 800023a:	490d      	ldr	r1, [pc, #52]	; (8000270 <LoopForever+0xa>)
  ldr r2, =_sidata
 800023c:	4a0d      	ldr	r2, [pc, #52]	; (8000274 <LoopForever+0xe>)
  movs r3, #0
 800023e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000240:	e002      	b.n	8000248 <LoopCopyDataInit>

08000242 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000242:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000244:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000246:	3304      	adds	r3, #4

08000248 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000248:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800024a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800024c:	d3f9      	bcc.n	8000242 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800024e:	4a0a      	ldr	r2, [pc, #40]	; (8000278 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000250:	4c0a      	ldr	r4, [pc, #40]	; (800027c <LoopForever+0x16>)
  movs r3, #0
 8000252:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000254:	e001      	b.n	800025a <LoopFillZerobss>

08000256 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000256:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000258:	3204      	adds	r2, #4

0800025a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800025a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800025c:	d3fb      	bcc.n	8000256 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800025e:	f000 f811 	bl	8000284 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000262:	f7ff ffaf 	bl	80001c4 <main>

08000266 <LoopForever>:

LoopForever:
    b LoopForever
 8000266:	e7fe      	b.n	8000266 <LoopForever>
  ldr   r0, =_estack
 8000268:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800026c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000270:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000274:	080002ec 	.word	0x080002ec
  ldr r2, =_sbss
 8000278:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800027c:	2000001c 	.word	0x2000001c

08000280 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000280:	e7fe      	b.n	8000280 <ADC1_2_IRQHandler>
	...

08000284 <__libc_init_array>:
 8000284:	b570      	push	{r4, r5, r6, lr}
 8000286:	2500      	movs	r5, #0
 8000288:	4e0c      	ldr	r6, [pc, #48]	; (80002bc <__libc_init_array+0x38>)
 800028a:	4c0d      	ldr	r4, [pc, #52]	; (80002c0 <__libc_init_array+0x3c>)
 800028c:	1ba4      	subs	r4, r4, r6
 800028e:	10a4      	asrs	r4, r4, #2
 8000290:	42a5      	cmp	r5, r4
 8000292:	d109      	bne.n	80002a8 <__libc_init_array+0x24>
 8000294:	f000 f81a 	bl	80002cc <_init>
 8000298:	2500      	movs	r5, #0
 800029a:	4e0a      	ldr	r6, [pc, #40]	; (80002c4 <__libc_init_array+0x40>)
 800029c:	4c0a      	ldr	r4, [pc, #40]	; (80002c8 <__libc_init_array+0x44>)
 800029e:	1ba4      	subs	r4, r4, r6
 80002a0:	10a4      	asrs	r4, r4, #2
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	d105      	bne.n	80002b2 <__libc_init_array+0x2e>
 80002a6:	bd70      	pop	{r4, r5, r6, pc}
 80002a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002ac:	4798      	blx	r3
 80002ae:	3501      	adds	r5, #1
 80002b0:	e7ee      	b.n	8000290 <__libc_init_array+0xc>
 80002b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002b6:	4798      	blx	r3
 80002b8:	3501      	adds	r5, #1
 80002ba:	e7f2      	b.n	80002a2 <__libc_init_array+0x1e>
 80002bc:	080002e4 	.word	0x080002e4
 80002c0:	080002e4 	.word	0x080002e4
 80002c4:	080002e4 	.word	0x080002e4
 80002c8:	080002e8 	.word	0x080002e8

080002cc <_init>:
 80002cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ce:	bf00      	nop
 80002d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002d2:	bc08      	pop	{r3}
 80002d4:	469e      	mov	lr, r3
 80002d6:	4770      	bx	lr

080002d8 <_fini>:
 80002d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002da:	bf00      	nop
 80002dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002de:	bc08      	pop	{r3}
 80002e0:	469e      	mov	lr, r3
 80002e2:	4770      	bx	lr
